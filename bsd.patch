diff --git a/Makefile b/Makefile
index 6edebba..6da3146 100644
--- a/Makefile
+++ b/Makefile
@@ -35,13 +35,13 @@ CFLAGS = -Wall \
          -Wtrigraphs \
          -Wsequence-point \
          -Wimplicit \
-         -Wredundant-decls \
          -Wstack-protector \
          -Woverlength-strings \
          -Waddress \
          -ggdb \
          -Wdeclaration-after-statement \
          -O3
+       # -Wredundant-decls \
        # -Werror \
        # -pg \
        # -Wpadded
@@ -52,10 +52,6 @@ OBJS   += ncurses_msg.o
 CFLAGS += -DNCURSES
 LFLAGS += -lcurses
 
-CFLAGS += -std=c99
-CFLAGS += -pedantic
-CFLAGS += -D_XOPEN_SOURCE=600
-
 .PHONY : all
 all : depend $(EXECUTABLE)
 
diff --git a/config.h b/config.h
index 445e4c9..268023a 100644
--- a/config.h
+++ b/config.h
@@ -137,12 +137,12 @@ const char *RESPONSE_403 = "403 - U better not go down this road!\r\n";
  * on new connection BUFFSIZE_READ -1 bytes are read from the socket,
  * everything extending that limit will be thrown away.
  */
-const uint32_t BUFFSIZE_READ = 2048;
+const size_t BUFFSIZE_READ = 2048;
 
 /*
  * if a file is transferd BUFFSIZE_WRITE describes the buffersize of
  * bytes read and then written to the socket.
  */
-const uint32_t BUFFSIZE_WRITE = 8192;
+const size_t BUFFSIZE_WRITE = 8192;
 
 #endif
diff --git a/file_list.c b/file_list.c
index f4ec0a7..52ea0e1 100644
--- a/file_list.c
+++ b/file_list.c
@@ -13,8 +13,8 @@
 /*
  * see config.h
  */
-extern char *ROOT_DIR;
 extern const size_t TABLE_BUFFER_SIZE;
+extern char *ROOT_DIR;
 extern const char *TABLE_PLAIN[3];
 extern const char *TABLE_HTML[3];
 
@@ -153,6 +153,7 @@ _add_file_to_dir(struct dir *d, char *file, char *directory)
 	struct stat sb;
 	struct file *new_file;
 	struct tm *tmp;
+	size_t n;
 
 	if (file == NULL) {
 		err_quit(ERR_INFO, "tried to add file which was NULL");
@@ -175,22 +176,23 @@ _add_file_to_dir(struct dir *d, char *file, char *directory)
 	new_file->name = err_malloc(strlen(file) + 1);
 	strncpy(new_file->name, file, strlen(file) + 1);
 
+	n = 11;
 	switch (sb.st_mode & S_IFMT) {
-		case S_IFREG:  strncpy(new_file->type, "file"      , 11); break;
-		case S_IFDIR:  strncpy(new_file->type, "directory" , 11); break;
-		case S_IFLNK:  strncpy(new_file->type, "symlink"   , 11); break;
-		case S_IFBLK:  strncpy(new_file->type, "blk_device", 11); break;
-		case S_IFCHR:  strncpy(new_file->type, "chr_device", 11); break;
-		case S_IFIFO:  strncpy(new_file->type, "fifo_pipe" , 11); break;
-		case S_IFSOCK: strncpy(new_file->type, "socket"    , 11); break;
-		default:       strncpy(new_file->type, "unknown"   , 11); break;
+		case S_IFREG:  strncpy(new_file->type, "file"      , n); break;
+		case S_IFDIR:  strncpy(new_file->type, "directory" , n); break;
+		case S_IFLNK:  strncpy(new_file->type, "symlink"   , n); break;
+		case S_IFBLK:  strncpy(new_file->type, "blk_device", n); break;
+		case S_IFCHR:  strncpy(new_file->type, "chr_device", n); break;
+		case S_IFIFO:  strncpy(new_file->type, "fifo_pipe" , n); break;
+		case S_IFSOCK: strncpy(new_file->type, "socket"    , n); break;
+		default:       strncpy(new_file->type, "unknown"   , n); break;
 	}
 
 	tmp = localtime(&sb.st_mtime);
 	if (tmp == NULL) {
 		err_quit(ERR_INFO, "localtime() returned NULL");
 	}
-	if (strftime(new_file->time, 20, "%Y-%m-%d %H:%M:%S", tmp) == 0) {
+	if (strftime(new_file->time, (size_t)20, "%Y-%m-%d %H:%M:%S", tmp) == 0) {
 		err_quit(ERR_INFO, "strftime() returned 0");
 	}
 
diff --git a/handle_request.c b/handle_request.c
index 750938c..890e3a7 100644
--- a/handle_request.c
+++ b/handle_request.c
@@ -5,7 +5,6 @@
 #include <unistd.h>
 #include <pthread.h>
 #include <sys/stat.h>
-#include <sys/types.h>
 
 #include "helper.h"
 #include "handle_request.h"
@@ -17,7 +16,7 @@
  */
 extern char *ROOT_DIR;
 extern int VERBOSITY;
-extern const uint32_t BUFFSIZE_READ;
+extern const size_t BUFFSIZE_READ;
 extern const char *HTTP_TOP;
 extern const char *HTTP_BOT;
 extern const char *RESPONSE_404;
@@ -107,7 +106,7 @@ handle_request(void *ptr)
 			    data->url);
 			break;
 		default:
-			strncpy(message_buffer, "no body_type set", 17);
+			strncpy(message_buffer, "no body_type set", (size_t)17);
 			break;
 	}
 	msg_print_info(data, SENT, message_buffer, -1);
diff --git a/helper.c b/helper.c
index af1a351..8a3ee8f 100644
--- a/helper.c
+++ b/helper.c
@@ -1,10 +1,9 @@
 #include <stdlib.h>
+#include <unistd.h>
 #include <stdio.h>
 #include <string.h>
-#include <unistd.h>
 #include <time.h>
 #include <sys/stat.h>
-#include <sys/types.h>
 #include <errno.h>
 
 #include "helper.h"
@@ -15,7 +14,7 @@
  */
 extern char *ROOT_DIR;
 extern FILE *_LOG_FILE;
-extern const uint32_t BUFFSIZE_WRITE;
+extern const size_t BUFFSIZE_WRITE;
 
 /*
  * if negative number is return, error occured
@@ -92,7 +91,7 @@ send_file(struct data_store *data)
 	ret_status = STAT_OK;
 
 	while (sending) {
-		read_bytes = fread(buffer, 1, BUFFSIZE_WRITE, f);
+		read_bytes = fread(buffer, (size_t)1, BUFFSIZE_WRITE, f);
 		if (read_bytes < BUFFSIZE_WRITE) {
 			sending = 0;
 		}
@@ -212,7 +211,7 @@ format_size(uint64_t size, char fmt_size[7])
 		type = "b ";
 	}
 
-	snprintf(fmt_size, 7, "%4llu%s", (long long unsigned int)new_size, type);
+	snprintf(fmt_size, (size_t)7, "%4llu%s", (long long unsigned int)new_size, type);
 
 	return fmt_size;
 }
diff --git a/main.c b/main.c
index 5c8346c..c9718a5 100644
--- a/main.c
+++ b/main.c
@@ -5,8 +5,9 @@
 #include <pthread.h>
 #include <unistd.h>
 #include <limits.h>
-#include <sys/socket.h>
 #include <arpa/inet.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
 
 #include "handle_request.h"
 #include "msg.h"
@@ -83,7 +84,7 @@ main(const int argc, const char *argv[])
 	on = 1;
 	/* set socket options to make reuse of socket possible */
 	error = setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR,
-		    (const char *) &on, sizeof(on));
+		    (const char *)&on, (socklen_t)sizeof(on));
 	if (error == -1) {
 		err_quit(ERR_INFO, "setsockopt() retuned -1");
 	}
@@ -95,7 +96,7 @@ main(const int argc, const char *argv[])
 
 	/* bind socket */
 	error = bind(server_socket, (struct sockaddr *) &serv_addr,
-		    sizeof(serv_addr));
+		    (socklen_t)sizeof(serv_addr));
 	if (error < 0) {
 		err_quit(ERR_INFO, "bind() < 0");
 	}
@@ -107,7 +108,7 @@ main(const int argc, const char *argv[])
 	/* put each connection in a new detached thread with its own data_store */
 	while (1) {
 		client_socket = accept(server_socket,
-				   (struct sockaddr *) &cli_addr, &clilen);
+				   (struct sockaddr *)&cli_addr, &clilen);
 #ifdef NCURSES
 		/* ncurses uses signals on resize, so accept will continue */
 		if (USE_NCURSES && WINDOW_RESIZED) {
@@ -118,7 +119,7 @@ main(const int argc, const char *argv[])
 #endif
 		data = create_data_store();
 		data->socket = client_socket;
-		strncpy(data->ip, inet_ntoa(cli_addr.sin_addr), 16);
+		strncpy(data->ip, inet_ntoa(cli_addr.sin_addr), (size_t)16);
 		data->port = ntohs(cli_addr.sin_port);
 
 		error = pthread_create(&thread, &attr, &handle_request, data);
diff --git a/msg.c b/msg.c
index b98a249..97ed84a 100644
--- a/msg.c
+++ b/msg.c
@@ -101,6 +101,8 @@ sleep:
 #endif
 	pthread_mutex_destroy(&status_list_mutex);
 	pthread_mutex_destroy(&print_mutex);
+
+	return NULL;
 }
 
 /*
@@ -122,7 +124,7 @@ msg_print_info(struct data_store *data, const enum message_type type,
 		err_quit(ERR_INFO, "localtime() returned NULL");
 	}
 
-	if (strftime(str_time, 20, "%Y-%m-%d %H:%M:%S", tmp) == 0) {
+	if (strftime(str_time, (size_t)20, "%Y-%m-%d %H:%M:%S", tmp) == 0) {
 		err_quit(ERR_INFO, "strftime() returned 0");
 	}
 
diff --git a/msg.h b/msg.h
index d8caa7d..66ef8e2 100644
--- a/msg.h
+++ b/msg.h
@@ -1,6 +1,8 @@
 #ifndef MESSAGES_H
 #define MESSAGES_H
 
+#include <pthread.h>
+
 #include "types.h"
 
 void msg_init(pthread_t *, const pthread_attr_t *);
diff --git a/ncurses_msg.c b/ncurses_msg.c
index 375833c..d03ab2b 100644
--- a/ncurses_msg.c
+++ b/ncurses_msg.c
@@ -94,7 +94,7 @@ ncurses_init(void)
  * if position is < 1 its a log message
  */
 void
-ncurses_print_info(struct data_store *data, char *m_type, const char *time,
+ncurses_print_info(struct data_store *data, char *m_type, const char *timestamp,
     const char *message, int position)
 {
 	size_t msg_buffer_size = 512;
@@ -114,7 +114,7 @@ ncurses_print_info(struct data_store *data, char *m_type, const char *time,
 			wclrtoeol(win_logging);
 			snprintf(msg_buffer, msg_buffer_size,
 			    "%-19s [%15s:%-5d - %3d]: %-3s - %s",
-			    time,
+			    timestamp,
 			    data->ip,
 			    data->port,
 			    data->socket,
